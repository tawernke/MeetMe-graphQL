# source: https://meet-me-production-96f801f58d.herokuapp.com/meet-me-prod/prod
# timestamp: Mon Feb 18 2019 20:09:19 GMT-0800 (Pacific Standard Time)

type AggregateEvent {
  count: Int!
}

type AggregatePlace {
  count: Int!
}

type AggregatePreference {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  
  count: Long!
}

scalar DateTime

type Event implements Node {
  id: ID!
  title: String
  location: String
  description: String
  start: String
  end: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}


type EventConnection {
  
  pageInfo: PageInfo!

  
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String
  location: String
  description: String
  start: String
  end: String
  user: UserCreateManyWithoutEventsInput
}

input EventCreateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutUserInput {
  title: String
  location: String
  description: String
  start: String
  end: String
}


type EventEdge {
  
  node: Event!

  
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  location_ASC
  location_DESC
  description_ASC
  description_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String
  location: String
  description: String
  start: String
  end: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EventScalarWhereInput {
  
  AND: [EventScalarWhereInput!]

  
  OR: [EventScalarWhereInput!]

  
  NOT: [EventScalarWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  title: String

  
  title_not: String

  
  title_in: [String!]

  
  title_not_in: [String!]

  
  title_lt: String

  
  title_lte: String

  
  title_gt: String

  
  title_gte: String

  
  title_contains: String

  
  title_not_contains: String

  
  title_starts_with: String

  
  title_not_starts_with: String

  
  title_ends_with: String

  
  title_not_ends_with: String
  location: String

  
  location_not: String

  
  location_in: [String!]

  
  location_not_in: [String!]

  
  location_lt: String

  
  location_lte: String

  
  location_gt: String

  
  location_gte: String

  
  location_contains: String

  
  location_not_contains: String

  
  location_starts_with: String

  
  location_not_starts_with: String

  
  location_ends_with: String

  
  location_not_ends_with: String
  description: String

  
  description_not: String

  
  description_in: [String!]

  
  description_not_in: [String!]

  
  description_lt: String

  
  description_lte: String

  
  description_gt: String

  
  description_gte: String

  
  description_contains: String

  
  description_not_contains: String

  
  description_starts_with: String

  
  description_not_starts_with: String

  
  description_ends_with: String

  
  description_not_ends_with: String
  start: String

  
  start_not: String

  
  start_in: [String!]

  
  start_not_in: [String!]

  
  start_lt: String

  
  start_lte: String

  
  start_gt: String

  
  start_gte: String

  
  start_contains: String

  
  start_not_contains: String

  
  start_starts_with: String

  
  start_not_starts_with: String

  
  start_ends_with: String

  
  start_not_ends_with: String
  end: String

  
  end_not: String

  
  end_in: [String!]

  
  end_not_in: [String!]

  
  end_lt: String

  
  end_lte: String

  
  end_gt: String

  
  end_gte: String

  
  end_contains: String

  
  end_not_contains: String

  
  end_starts_with: String

  
  end_not_starts_with: String

  
  end_ends_with: String

  
  end_not_ends_with: String
  createdAt: DateTime

  
  createdAt_not: DateTime

  
  createdAt_in: [DateTime!]

  
  createdAt_not_in: [DateTime!]

  
  createdAt_lt: DateTime

  
  createdAt_lte: DateTime

  
  createdAt_gt: DateTime

  
  createdAt_gte: DateTime
  updatedAt: DateTime

  
  updatedAt_not: DateTime

  
  updatedAt_in: [DateTime!]

  
  updatedAt_not_in: [DateTime!]

  
  updatedAt_lt: DateTime

  
  updatedAt_lte: DateTime

  
  updatedAt_gt: DateTime

  
  updatedAt_gte: DateTime
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  
  AND: [EventSubscriptionWhereInput!]

  
  OR: [EventSubscriptionWhereInput!]

  
  NOT: [EventSubscriptionWhereInput!]

  
  
  
  mutation_in: [MutationType!]

  
  
  
  updatedFields_contains: String

  
  
  
  updatedFields_contains_every: [String!]

  
  
  
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  location: String
  description: String
  start: String
  end: String
  user: UserUpdateManyWithoutEventsInput
}

input EventUpdateManyDataInput {
  title: String
  location: String
  description: String
  start: String
  end: String
}

input EventUpdateManyMutationInput {
  title: String
  location: String
  description: String
  start: String
  end: String
}

input EventUpdateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutUserDataInput {
  title: String
  location: String
  description: String
  start: String
  end: String
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutUserDataInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutUserDataInput!
  create: EventCreateWithoutUserInput!
}

input EventWhereInput {
  
  AND: [EventWhereInput!]

  
  OR: [EventWhereInput!]

  
  NOT: [EventWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  title: String

  
  title_not: String

  
  title_in: [String!]

  
  title_not_in: [String!]

  
  title_lt: String

  
  title_lte: String

  
  title_gt: String

  
  title_gte: String

  
  title_contains: String

  
  title_not_contains: String

  
  title_starts_with: String

  
  title_not_starts_with: String

  
  title_ends_with: String

  
  title_not_ends_with: String
  location: String

  
  location_not: String

  
  location_in: [String!]

  
  location_not_in: [String!]

  
  location_lt: String

  
  location_lte: String

  
  location_gt: String

  
  location_gte: String

  
  location_contains: String

  
  location_not_contains: String

  
  location_starts_with: String

  
  location_not_starts_with: String

  
  location_ends_with: String

  
  location_not_ends_with: String
  description: String

  
  description_not: String

  
  description_in: [String!]

  
  description_not_in: [String!]

  
  description_lt: String

  
  description_lte: String

  
  description_gt: String

  
  description_gte: String

  
  description_contains: String

  
  description_not_contains: String

  
  description_starts_with: String

  
  description_not_starts_with: String

  
  description_ends_with: String

  
  description_not_ends_with: String
  start: String

  
  start_not: String

  
  start_in: [String!]

  
  start_not_in: [String!]

  
  start_lt: String

  
  start_lte: String

  
  start_gt: String

  
  start_gte: String

  
  start_contains: String

  
  start_not_contains: String

  
  start_starts_with: String

  
  start_not_starts_with: String

  
  start_ends_with: String

  
  start_not_ends_with: String
  end: String

  
  end_not: String

  
  end_in: [String!]

  
  end_not_in: [String!]

  
  end_lt: String

  
  end_lte: String

  
  end_gt: String

  
  end_gte: String

  
  end_contains: String

  
  end_not_contains: String

  
  end_starts_with: String

  
  end_not_starts_with: String

  
  end_ends_with: String

  
  end_not_ends_with: String
  createdAt: DateTime

  
  createdAt_not: DateTime

  
  createdAt_in: [DateTime!]

  
  createdAt_not_in: [DateTime!]

  
  createdAt_lt: DateTime

  
  createdAt_lte: DateTime

  
  createdAt_gt: DateTime

  
  createdAt_gte: DateTime
  updatedAt: DateTime

  
  updatedAt_not: DateTime

  
  updatedAt_in: [DateTime!]

  
  updatedAt_not_in: [DateTime!]

  
  updatedAt_lt: DateTime

  
  updatedAt_lte: DateTime

  
  updatedAt_gt: DateTime

  
  updatedAt_gte: DateTime
  user_every: UserWhereInput
  user_some: UserWhereInput
  user_none: UserWhereInput
}

input EventWhereUniqueInput {
  id: ID
}




scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  createPlace(data: PlaceCreateInput!): Place!
  createPreference(data: PreferenceCreateInput!): Preference!
  createUser(data: UserCreateInput!): User!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updatePreference(data: PreferenceUpdateInput!, where: PreferenceWhereUniqueInput!): Preference
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEvent(where: EventWhereUniqueInput!): Event
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deletePreference(where: PreferenceWhereUniqueInput!): Preference
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  upsertPreference(where: PreferenceWhereUniqueInput!, create: PreferenceCreateInput!, update: PreferenceUpdateInput!): Preference!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyPlaces(data: PlaceUpdateManyMutationInput!, where: PlaceWhereInput): BatchPayload!
  updateManyPreferences(data: PreferenceUpdateManyMutationInput!, where: PreferenceWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyPlaces(where: PlaceWhereInput): BatchPayload!
  deleteManyPreferences(where: PreferenceWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}


interface Node {
  
  id: ID!
}


type PageInfo {
  
  hasNextPage: Boolean!

  
  hasPreviousPage: Boolean!

  
  startCursor: String

  
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  ITEMCREATE
  ITEMUPDATE
  ITEMDELETE
  PERMISSIONUPDATE
}

type Place implements Node {
  id: ID!
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  createdAt: DateTime!
  updatedAt: DateTime!
  price: String
  user(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}


type PlaceConnection {
  
  pageInfo: PageInfo!

  
  edges: [PlaceEdge]!
  aggregate: AggregatePlace!
}

input PlaceCreateInput {
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  price: String
  user: UserCreateManyWithoutPlacesInput
}

input PlaceCreateManyWithoutUserInput {
  create: [PlaceCreateWithoutUserInput!]
  connect: [PlaceWhereUniqueInput!]
}

input PlaceCreateWithoutUserInput {
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  price: String
}


type PlaceEdge {
  
  node: Place!

  
  cursor: String!
}

enum PlaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address1_ASC
  address1_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  postal_code_ASC
  postal_code_DESC
  country_ASC
  country_DESC
  type_ASC
  type_DESC
  rating_ASC
  rating_DESC
  image_ASC
  image_DESC
  phone_ASC
  phone_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  price_ASC
  price_DESC
}

type PlacePreviousValues {
  id: ID!
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  createdAt: DateTime!
  updatedAt: DateTime!
  price: String
}

input PlaceScalarWhereInput {
  
  AND: [PlaceScalarWhereInput!]

  
  OR: [PlaceScalarWhereInput!]

  
  NOT: [PlaceScalarWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  name: String

  
  name_not: String

  
  name_in: [String!]

  
  name_not_in: [String!]

  
  name_lt: String

  
  name_lte: String

  
  name_gt: String

  
  name_gte: String

  
  name_contains: String

  
  name_not_contains: String

  
  name_starts_with: String

  
  name_not_starts_with: String

  
  name_ends_with: String

  
  name_not_ends_with: String
  address1: String

  
  address1_not: String

  
  address1_in: [String!]

  
  address1_not_in: [String!]

  
  address1_lt: String

  
  address1_lte: String

  
  address1_gt: String

  
  address1_gte: String

  
  address1_contains: String

  
  address1_not_contains: String

  
  address1_starts_with: String

  
  address1_not_starts_with: String

  
  address1_ends_with: String

  
  address1_not_ends_with: String
  city: String

  
  city_not: String

  
  city_in: [String!]

  
  city_not_in: [String!]

  
  city_lt: String

  
  city_lte: String

  
  city_gt: String

  
  city_gte: String

  
  city_contains: String

  
  city_not_contains: String

  
  city_starts_with: String

  
  city_not_starts_with: String

  
  city_ends_with: String

  
  city_not_ends_with: String
  state: String

  
  state_not: String

  
  state_in: [String!]

  
  state_not_in: [String!]

  
  state_lt: String

  
  state_lte: String

  
  state_gt: String

  
  state_gte: String

  
  state_contains: String

  
  state_not_contains: String

  
  state_starts_with: String

  
  state_not_starts_with: String

  
  state_ends_with: String

  
  state_not_ends_with: String
  postal_code: String

  
  postal_code_not: String

  
  postal_code_in: [String!]

  
  postal_code_not_in: [String!]

  
  postal_code_lt: String

  
  postal_code_lte: String

  
  postal_code_gt: String

  
  postal_code_gte: String

  
  postal_code_contains: String

  
  postal_code_not_contains: String

  
  postal_code_starts_with: String

  
  postal_code_not_starts_with: String

  
  postal_code_ends_with: String

  
  postal_code_not_ends_with: String
  country: String

  
  country_not: String

  
  country_in: [String!]

  
  country_not_in: [String!]

  
  country_lt: String

  
  country_lte: String

  
  country_gt: String

  
  country_gte: String

  
  country_contains: String

  
  country_not_contains: String

  
  country_starts_with: String

  
  country_not_starts_with: String

  
  country_ends_with: String

  
  country_not_ends_with: String
  type: String

  
  type_not: String

  
  type_in: [String!]

  
  type_not_in: [String!]

  
  type_lt: String

  
  type_lte: String

  
  type_gt: String

  
  type_gte: String

  
  type_contains: String

  
  type_not_contains: String

  
  type_starts_with: String

  
  type_not_starts_with: String

  
  type_ends_with: String

  
  type_not_ends_with: String
  rating: Float

  
  rating_not: Float

  
  rating_in: [Float!]

  
  rating_not_in: [Float!]

  
  rating_lt: Float

  
  rating_lte: Float

  
  rating_gt: Float

  
  rating_gte: Float
  image: String

  
  image_not: String

  
  image_in: [String!]

  
  image_not_in: [String!]

  
  image_lt: String

  
  image_lte: String

  
  image_gt: String

  
  image_gte: String

  
  image_contains: String

  
  image_not_contains: String

  
  image_starts_with: String

  
  image_not_starts_with: String

  
  image_ends_with: String

  
  image_not_ends_with: String
  phone: String

  
  phone_not: String

  
  phone_in: [String!]

  
  phone_not_in: [String!]

  
  phone_lt: String

  
  phone_lte: String

  
  phone_gt: String

  
  phone_gte: String

  
  phone_contains: String

  
  phone_not_contains: String

  
  phone_starts_with: String

  
  phone_not_starts_with: String

  
  phone_ends_with: String

  
  phone_not_ends_with: String
  createdAt: DateTime

  
  createdAt_not: DateTime

  
  createdAt_in: [DateTime!]

  
  createdAt_not_in: [DateTime!]

  
  createdAt_lt: DateTime

  
  createdAt_lte: DateTime

  
  createdAt_gt: DateTime

  
  createdAt_gte: DateTime
  updatedAt: DateTime

  
  updatedAt_not: DateTime

  
  updatedAt_in: [DateTime!]

  
  updatedAt_not_in: [DateTime!]

  
  updatedAt_lt: DateTime

  
  updatedAt_lte: DateTime

  
  updatedAt_gt: DateTime

  
  updatedAt_gte: DateTime
  price: String

  
  price_not: String

  
  price_in: [String!]

  
  price_not_in: [String!]

  
  price_lt: String

  
  price_lte: String

  
  price_gt: String

  
  price_gte: String

  
  price_contains: String

  
  price_not_contains: String

  
  price_starts_with: String

  
  price_not_starts_with: String

  
  price_ends_with: String

  
  price_not_ends_with: String
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  
  AND: [PlaceSubscriptionWhereInput!]

  
  OR: [PlaceSubscriptionWhereInput!]

  
  NOT: [PlaceSubscriptionWhereInput!]

  
  
  
  mutation_in: [MutationType!]

  
  
  
  updatedFields_contains: String

  
  
  
  updatedFields_contains_every: [String!]

  
  
  
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
}

input PlaceUpdateInput {
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  price: String
  user: UserUpdateManyWithoutPlacesInput
}

input PlaceUpdateManyDataInput {
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  price: String
}

input PlaceUpdateManyMutationInput {
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  price: String
}

input PlaceUpdateManyWithoutUserInput {
  create: [PlaceCreateWithoutUserInput!]
  connect: [PlaceWhereUniqueInput!]
  disconnect: [PlaceWhereUniqueInput!]
  delete: [PlaceWhereUniqueInput!]
  update: [PlaceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PlaceUpdateManyWithWhereNestedInput!]
  deleteMany: [PlaceScalarWhereInput!]
  upsert: [PlaceUpsertWithWhereUniqueWithoutUserInput!]
}

input PlaceUpdateManyWithWhereNestedInput {
  where: PlaceScalarWhereInput!
  data: PlaceUpdateManyDataInput!
}

input PlaceUpdateWithoutUserDataInput {
  name: String
  address1: String
  city: String
  state: String
  postal_code: String
  country: String
  type: String
  rating: Float
  image: String
  phone: String
  price: String
}

input PlaceUpdateWithWhereUniqueWithoutUserInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutUserDataInput!
}

input PlaceUpsertWithWhereUniqueWithoutUserInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutUserDataInput!
  create: PlaceCreateWithoutUserInput!
}

input PlaceWhereInput {
  
  AND: [PlaceWhereInput!]

  
  OR: [PlaceWhereInput!]

  
  NOT: [PlaceWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  name: String

  
  name_not: String

  
  name_in: [String!]

  
  name_not_in: [String!]

  
  name_lt: String

  
  name_lte: String

  
  name_gt: String

  
  name_gte: String

  
  name_contains: String

  
  name_not_contains: String

  
  name_starts_with: String

  
  name_not_starts_with: String

  
  name_ends_with: String

  
  name_not_ends_with: String
  address1: String

  
  address1_not: String

  
  address1_in: [String!]

  
  address1_not_in: [String!]

  
  address1_lt: String

  
  address1_lte: String

  
  address1_gt: String

  
  address1_gte: String

  
  address1_contains: String

  
  address1_not_contains: String

  
  address1_starts_with: String

  
  address1_not_starts_with: String

  
  address1_ends_with: String

  
  address1_not_ends_with: String
  city: String

  
  city_not: String

  
  city_in: [String!]

  
  city_not_in: [String!]

  
  city_lt: String

  
  city_lte: String

  
  city_gt: String

  
  city_gte: String

  
  city_contains: String

  
  city_not_contains: String

  
  city_starts_with: String

  
  city_not_starts_with: String

  
  city_ends_with: String

  
  city_not_ends_with: String
  state: String

  
  state_not: String

  
  state_in: [String!]

  
  state_not_in: [String!]

  
  state_lt: String

  
  state_lte: String

  
  state_gt: String

  
  state_gte: String

  
  state_contains: String

  
  state_not_contains: String

  
  state_starts_with: String

  
  state_not_starts_with: String

  
  state_ends_with: String

  
  state_not_ends_with: String
  postal_code: String

  
  postal_code_not: String

  
  postal_code_in: [String!]

  
  postal_code_not_in: [String!]

  
  postal_code_lt: String

  
  postal_code_lte: String

  
  postal_code_gt: String

  
  postal_code_gte: String

  
  postal_code_contains: String

  
  postal_code_not_contains: String

  
  postal_code_starts_with: String

  
  postal_code_not_starts_with: String

  
  postal_code_ends_with: String

  
  postal_code_not_ends_with: String
  country: String

  
  country_not: String

  
  country_in: [String!]

  
  country_not_in: [String!]

  
  country_lt: String

  
  country_lte: String

  
  country_gt: String

  
  country_gte: String

  
  country_contains: String

  
  country_not_contains: String

  
  country_starts_with: String

  
  country_not_starts_with: String

  
  country_ends_with: String

  
  country_not_ends_with: String
  type: String

  
  type_not: String

  
  type_in: [String!]

  
  type_not_in: [String!]

  
  type_lt: String

  
  type_lte: String

  
  type_gt: String

  
  type_gte: String

  
  type_contains: String

  
  type_not_contains: String

  
  type_starts_with: String

  
  type_not_starts_with: String

  
  type_ends_with: String

  
  type_not_ends_with: String
  rating: Float

  
  rating_not: Float

  
  rating_in: [Float!]

  
  rating_not_in: [Float!]

  
  rating_lt: Float

  
  rating_lte: Float

  
  rating_gt: Float

  
  rating_gte: Float
  image: String

  
  image_not: String

  
  image_in: [String!]

  
  image_not_in: [String!]

  
  image_lt: String

  
  image_lte: String

  
  image_gt: String

  
  image_gte: String

  
  image_contains: String

  
  image_not_contains: String

  
  image_starts_with: String

  
  image_not_starts_with: String

  
  image_ends_with: String

  
  image_not_ends_with: String
  phone: String

  
  phone_not: String

  
  phone_in: [String!]

  
  phone_not_in: [String!]

  
  phone_lt: String

  
  phone_lte: String

  
  phone_gt: String

  
  phone_gte: String

  
  phone_contains: String

  
  phone_not_contains: String

  
  phone_starts_with: String

  
  phone_not_starts_with: String

  
  phone_ends_with: String

  
  phone_not_ends_with: String
  createdAt: DateTime

  
  createdAt_not: DateTime

  
  createdAt_in: [DateTime!]

  
  createdAt_not_in: [DateTime!]

  
  createdAt_lt: DateTime

  
  createdAt_lte: DateTime

  
  createdAt_gt: DateTime

  
  createdAt_gte: DateTime
  updatedAt: DateTime

  
  updatedAt_not: DateTime

  
  updatedAt_in: [DateTime!]

  
  updatedAt_not_in: [DateTime!]

  
  updatedAt_lt: DateTime

  
  updatedAt_lte: DateTime

  
  updatedAt_gt: DateTime

  
  updatedAt_gte: DateTime
  price: String

  
  price_not: String

  
  price_in: [String!]

  
  price_not_in: [String!]

  
  price_lt: String

  
  price_lte: String

  
  price_gt: String

  
  price_gte: String

  
  price_contains: String

  
  price_not_contains: String

  
  price_starts_with: String

  
  price_not_starts_with: String

  
  price_ends_with: String

  
  price_not_ends_with: String
  user_every: UserWhereInput
  user_some: UserWhereInput
  user_none: UserWhereInput
}

input PlaceWhereUniqueInput {
  id: ID
}

type Preference implements Node {
  id: ID!
  name: String
  user: User
}


type PreferenceConnection {
  
  pageInfo: PageInfo!

  
  edges: [PreferenceEdge]!
  aggregate: AggregatePreference!
}

input PreferenceCreateInput {
  name: String
  user: UserCreateOneWithoutPreferencesInput
}

input PreferenceCreateManyWithoutUserInput {
  create: [PreferenceCreateWithoutUserInput!]
  connect: [PreferenceWhereUniqueInput!]
}

input PreferenceCreateWithoutUserInput {
  name: String
}


type PreferenceEdge {
  
  node: Preference!

  
  cursor: String!
}

enum PreferenceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PreferencePreviousValues {
  id: ID!
  name: String
}

input PreferenceScalarWhereInput {
  
  AND: [PreferenceScalarWhereInput!]

  
  OR: [PreferenceScalarWhereInput!]

  
  NOT: [PreferenceScalarWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  name: String

  
  name_not: String

  
  name_in: [String!]

  
  name_not_in: [String!]

  
  name_lt: String

  
  name_lte: String

  
  name_gt: String

  
  name_gte: String

  
  name_contains: String

  
  name_not_contains: String

  
  name_starts_with: String

  
  name_not_starts_with: String

  
  name_ends_with: String

  
  name_not_ends_with: String
}

type PreferenceSubscriptionPayload {
  mutation: MutationType!
  node: Preference
  updatedFields: [String!]
  previousValues: PreferencePreviousValues
}

input PreferenceSubscriptionWhereInput {
  
  AND: [PreferenceSubscriptionWhereInput!]

  
  OR: [PreferenceSubscriptionWhereInput!]

  
  NOT: [PreferenceSubscriptionWhereInput!]

  
  
  
  mutation_in: [MutationType!]

  
  
  
  updatedFields_contains: String

  
  
  
  updatedFields_contains_every: [String!]

  
  
  
  updatedFields_contains_some: [String!]
  node: PreferenceWhereInput
}

input PreferenceUpdateInput {
  name: String
  user: UserUpdateOneWithoutPreferencesInput
}

input PreferenceUpdateManyDataInput {
  name: String
}

input PreferenceUpdateManyMutationInput {
  name: String
}

input PreferenceUpdateManyWithoutUserInput {
  create: [PreferenceCreateWithoutUserInput!]
  connect: [PreferenceWhereUniqueInput!]
  disconnect: [PreferenceWhereUniqueInput!]
  delete: [PreferenceWhereUniqueInput!]
  update: [PreferenceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PreferenceUpdateManyWithWhereNestedInput!]
  deleteMany: [PreferenceScalarWhereInput!]
  upsert: [PreferenceUpsertWithWhereUniqueWithoutUserInput!]
}

input PreferenceUpdateManyWithWhereNestedInput {
  where: PreferenceScalarWhereInput!
  data: PreferenceUpdateManyDataInput!
}

input PreferenceUpdateWithoutUserDataInput {
  name: String
}

input PreferenceUpdateWithWhereUniqueWithoutUserInput {
  where: PreferenceWhereUniqueInput!
  data: PreferenceUpdateWithoutUserDataInput!
}

input PreferenceUpsertWithWhereUniqueWithoutUserInput {
  where: PreferenceWhereUniqueInput!
  update: PreferenceUpdateWithoutUserDataInput!
  create: PreferenceCreateWithoutUserInput!
}

input PreferenceWhereInput {
  
  AND: [PreferenceWhereInput!]

  
  OR: [PreferenceWhereInput!]

  
  NOT: [PreferenceWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  name: String

  
  name_not: String

  
  name_in: [String!]

  
  name_not_in: [String!]

  
  name_lt: String

  
  name_lte: String

  
  name_gt: String

  
  name_gte: String

  
  name_contains: String

  
  name_not_contains: String

  
  name_starts_with: String

  
  name_not_starts_with: String

  
  name_ends_with: String

  
  name_not_ends_with: String
  user: UserWhereInput
}

input PreferenceWhereUniqueInput {
  id: ID
}

type Query {
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  preferences(where: PreferenceWhereInput, orderBy: PreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Preference]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  event(where: EventWhereUniqueInput!): Event
  place(where: PlaceWhereUniqueInput!): Place
  preference(where: PreferenceWhereUniqueInput!): Preference
  user(where: UserWhereUniqueInput!): User
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  preferencesConnection(where: PreferenceWhereInput, orderBy: PreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreferenceConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  
  node(
    
    id: ID!
  ): Node
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  preference(where: PreferenceSubscriptionWhereInput): PreferenceSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  image: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place!]
  preferences(where: PreferenceWhereInput, orderBy: PreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Preference!]
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}


type UserConnection {
  
  pageInfo: PageInfo!

  
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserCreatepermissionsInput
  events: EventCreateManyWithoutUserInput
  places: PlaceCreateManyWithoutUserInput
  preferences: PreferenceCreateManyWithoutUserInput
  friends: UserCreateManyInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutEventsInput {
  create: [UserCreateWithoutEventsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPlacesInput {
  create: [UserCreateWithoutPlacesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutEventsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserCreatepermissionsInput
  places: PlaceCreateManyWithoutUserInput
  preferences: PreferenceCreateManyWithoutUserInput
  friends: UserCreateManyInput
}

input UserCreateWithoutPlacesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserCreatepermissionsInput
  events: EventCreateManyWithoutUserInput
  preferences: PreferenceCreateManyWithoutUserInput
  friends: UserCreateManyInput
}

input UserCreateWithoutPreferencesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserCreatepermissionsInput
  events: EventCreateManyWithoutUserInput
  places: PlaceCreateManyWithoutUserInput
  friends: UserCreateManyInput
}


type UserEdge {
  
  node: User!

  
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  image_ASC
  image_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  image: String
}

input UserScalarWhereInput {
  
  AND: [UserScalarWhereInput!]

  
  OR: [UserScalarWhereInput!]

  
  NOT: [UserScalarWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  name: String

  
  name_not: String

  
  name_in: [String!]

  
  name_not_in: [String!]

  
  name_lt: String

  
  name_lte: String

  
  name_gt: String

  
  name_gte: String

  
  name_contains: String

  
  name_not_contains: String

  
  name_starts_with: String

  
  name_not_starts_with: String

  
  name_ends_with: String

  
  name_not_ends_with: String
  email: String

  
  email_not: String

  
  email_in: [String!]

  
  email_not_in: [String!]

  
  email_lt: String

  
  email_lte: String

  
  email_gt: String

  
  email_gte: String

  
  email_contains: String

  
  email_not_contains: String

  
  email_starts_with: String

  
  email_not_starts_with: String

  
  email_ends_with: String

  
  email_not_ends_with: String
  password: String

  
  password_not: String

  
  password_in: [String!]

  
  password_not_in: [String!]

  
  password_lt: String

  
  password_lte: String

  
  password_gt: String

  
  password_gte: String

  
  password_contains: String

  
  password_not_contains: String

  
  password_starts_with: String

  
  password_not_starts_with: String

  
  password_ends_with: String

  
  password_not_ends_with: String
  resetToken: String

  
  resetToken_not: String

  
  resetToken_in: [String!]

  
  resetToken_not_in: [String!]

  
  resetToken_lt: String

  
  resetToken_lte: String

  
  resetToken_gt: String

  
  resetToken_gte: String

  
  resetToken_contains: String

  
  resetToken_not_contains: String

  
  resetToken_starts_with: String

  
  resetToken_not_starts_with: String

  
  resetToken_ends_with: String

  
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  
  resetTokenExpiry_not: Float

  
  resetTokenExpiry_in: [Float!]

  
  resetTokenExpiry_not_in: [Float!]

  
  resetTokenExpiry_lt: Float

  
  resetTokenExpiry_lte: Float

  
  resetTokenExpiry_gt: Float

  
  resetTokenExpiry_gte: Float
  image: String

  
  image_not: String

  
  image_in: [String!]

  
  image_not_in: [String!]

  
  image_lt: String

  
  image_lte: String

  
  image_gt: String

  
  image_gte: String

  
  image_contains: String

  
  image_not_contains: String

  
  image_starts_with: String

  
  image_not_starts_with: String

  
  image_ends_with: String

  
  image_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  
  AND: [UserSubscriptionWhereInput!]

  
  OR: [UserSubscriptionWhereInput!]

  
  NOT: [UserSubscriptionWhereInput!]

  
  
  
  mutation_in: [MutationType!]

  
  
  
  updatedFields_contains: String

  
  
  
  updatedFields_contains_every: [String!]

  
  
  
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserUpdatepermissionsInput
  events: EventUpdateManyWithoutUserInput
  places: PlaceUpdateManyWithoutUserInput
  preferences: PreferenceUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserUpdatepermissionsInput
  events: EventUpdateManyWithoutUserInput
  places: PlaceUpdateManyWithoutUserInput
  preferences: PreferenceUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyWithoutEventsInput {
  create: [UserCreateWithoutEventsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutEventsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutEventsInput!]
}

input UserUpdateManyWithoutPlacesInput {
  create: [UserCreateWithoutPlacesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPlacesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPlacesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPreferencesDataInput
  upsert: UserUpsertWithoutPreferencesInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutEventsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserUpdatepermissionsInput
  places: PlaceUpdateManyWithoutUserInput
  preferences: PreferenceUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
}

input UserUpdateWithoutPlacesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserUpdatepermissionsInput
  events: EventUpdateManyWithoutUserInput
  preferences: PreferenceUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
}

input UserUpdateWithoutPreferencesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  permissions: UserUpdatepermissionsInput
  events: EventUpdateManyWithoutUserInput
  places: PlaceUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEventsDataInput!
}

input UserUpdateWithWhereUniqueWithoutPlacesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPlacesDataInput!
}

input UserUpsertWithoutPreferencesInput {
  update: UserUpdateWithoutPreferencesDataInput!
  create: UserCreateWithoutPreferencesInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithWhereUniqueWithoutPlacesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPlacesDataInput!
  create: UserCreateWithoutPlacesInput!
}

input UserWhereInput {
  
  AND: [UserWhereInput!]

  
  OR: [UserWhereInput!]

  
  NOT: [UserWhereInput!]
  id: ID

  
  id_not: ID

  
  id_in: [ID!]

  
  id_not_in: [ID!]

  
  id_lt: ID

  
  id_lte: ID

  
  id_gt: ID

  
  id_gte: ID

  
  id_contains: ID

  
  id_not_contains: ID

  
  id_starts_with: ID

  
  id_not_starts_with: ID

  
  id_ends_with: ID

  
  id_not_ends_with: ID
  name: String

  
  name_not: String

  
  name_in: [String!]

  
  name_not_in: [String!]

  
  name_lt: String

  
  name_lte: String

  
  name_gt: String

  
  name_gte: String

  
  name_contains: String

  
  name_not_contains: String

  
  name_starts_with: String

  
  name_not_starts_with: String

  
  name_ends_with: String

  
  name_not_ends_with: String
  email: String

  
  email_not: String

  
  email_in: [String!]

  
  email_not_in: [String!]

  
  email_lt: String

  
  email_lte: String

  
  email_gt: String

  
  email_gte: String

  
  email_contains: String

  
  email_not_contains: String

  
  email_starts_with: String

  
  email_not_starts_with: String

  
  email_ends_with: String

  
  email_not_ends_with: String
  password: String

  
  password_not: String

  
  password_in: [String!]

  
  password_not_in: [String!]

  
  password_lt: String

  
  password_lte: String

  
  password_gt: String

  
  password_gte: String

  
  password_contains: String

  
  password_not_contains: String

  
  password_starts_with: String

  
  password_not_starts_with: String

  
  password_ends_with: String

  
  password_not_ends_with: String
  resetToken: String

  
  resetToken_not: String

  
  resetToken_in: [String!]

  
  resetToken_not_in: [String!]

  
  resetToken_lt: String

  
  resetToken_lte: String

  
  resetToken_gt: String

  
  resetToken_gte: String

  
  resetToken_contains: String

  
  resetToken_not_contains: String

  
  resetToken_starts_with: String

  
  resetToken_not_starts_with: String

  
  resetToken_ends_with: String

  
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  
  resetTokenExpiry_not: Float

  
  resetTokenExpiry_in: [Float!]

  
  resetTokenExpiry_not_in: [Float!]

  
  resetTokenExpiry_lt: Float

  
  resetTokenExpiry_lte: Float

  
  resetTokenExpiry_gt: Float

  
  resetTokenExpiry_gte: Float
  image: String

  
  image_not: String

  
  image_in: [String!]

  
  image_not_in: [String!]

  
  image_lt: String

  
  image_lte: String

  
  image_gt: String

  
  image_gte: String

  
  image_contains: String

  
  image_not_contains: String

  
  image_starts_with: String

  
  image_not_starts_with: String

  
  image_ends_with: String

  
  image_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  places_every: PlaceWhereInput
  places_some: PlaceWhereInput
  places_none: PlaceWhereInput
  preferences_every: PreferenceWhereInput
  preferences_some: PreferenceWhereInput
  preferences_none: PreferenceWhereInput
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
